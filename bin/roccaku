#!/usr/bin/env perl
use strict;
use warnings;
use FindBin;
use Data::Dumper;
use Carp;
use Getopt::Long;
use lib qq($FindBin::Bin/../lib);
use Roccaku;
use Roccaku::Utils;

our @command_args = @ARGV;

my %params;
GetOptions(
  \%params,
  "config-path=s" ,
  "not-backup=s"  ,
  "debug"         ,
  "test-only"     ,
  "argv=s"        ,
  "host=s"        ,
  "version"       ,
  "install-perl=s", # for remote
  "is-remote"     , # use internal only
  "store-path=s"  , # use internal only
  "ssh-key=s"     ,
);

if (defined $params{version}) {
  print "Version: $Roccaku::VERSION\n";
  exit 0;
}

my $r6 = Roccaku->new(
                       $params{"config-path"},
                       +{
                          debug => $params{debug},
                          argv  => $params{argv},
                        },
                     );

logging("$0 " . join " ", @command_args);
$r6->test_only( $params{"test-only"} );

__FOR_CLI_OUTPUT__: {
  local $| = 1;
  if (! $params{"is-remote"}) {
    printf "  %s is starting to run...", ref $r6;
    sleep 1;
    printf "test phase only" if $r6->test_only;
    sleep 1                  if $r6->test_only;
    printf "\n\n";
  }
}

my $result = $r6->run( \%params );
$result->store($params{"store-path"}) if $params{"store-path"};

__FOR_CLI_RESULT__: {
  local $| = 1;
  if (! $params{"is-remote"}) {
    no strict 'refs';
    print "\n";
    if ($result->result->{ok}) {
      if (! $r6->test_only) {
        print "  all processes was successfully.\n";
      } else {
        print "  all MUST checking was successfully.\n";
      }
      exit 0;
    } else {
      print "  MUST checking has some errors.\n";
      if (! $r6->test_only) {
        printf "  But Just now, try to run Configure processes.\n";
        printf "  Run this command again to confirm them.\n";
        printf "  \$ sudo $0 %s -t(--test-only)\n", (join " ", @command_args);
      }
      exit 1;
    }
  }
}

