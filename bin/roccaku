#!/usr/bin/env perl
use strict;
use warnings;
use FindBin;
use Data::Dumper;

use Getopt::Long;
use lib qq($FindBin::Bin/../lib);
use Roccaku;
use Roccaku::Utils;

our @command_args = @ARGV;

my %params;
GetOptions(
  \%params,
  "config-path=s",
  "not-backup=s" ,
  "debug"        ,
  "test-only"    ,
  "argv=s"       ,
  "host=s"       ,
  "api"          ,
);

my $r6 = Roccaku->new(
                       $params{"config-path"},
                       +{
                          debug    => $params{debug},
                          argv     => $params{argv},
                          api_mode => $params{api},
                        },
                     );

logging("$0 " . join " ", @command_args);
$r6->test_only( $params{"test-only"} );

__FOR_CLI_OUTPUT__: {
  if (! $params{api}) {
    local $| = 1;
    printf "  %s is starting to run...", ref $r6;
    sleep 1;
    printf "test phase only" if $r6->test_only;
    sleep 1                  if $r6->test_only;
    printf "\n\n";
  }
}

my $result = $r6->run( \%params );

__FOR_CLI_RESULT__: {
  if (! $params{api}) {
    local $| = 1;
    no strict 'refs';
    print "\n";
    if ($result->{success}->{must} and $result->{success}->{do}) {
      print "  all processes was successfully.\n";
      exit 0;
    }
    elsif ($result->{success}->{must}) {
      print "  all MUST checking was successfully.\n";
      exit 0;
    }
    elsif (! $result->{success}->{must}) {
      print "  MUST checking has some errors.\n";
      if (! $r6->test_only) {
        printf "  But Just now, try to run Configure processes.\n";
        printf "  Run this command again to confirm them.\n";
        printf "  \$ sudo $0 %s -t(--test-only)\n", (join " ", @command_args);
        exit 0;
      }
      exit 1;
    }
    elsif (! $result->{success}->{do}) {
      print "  Configuring process did have some errors.\n";
      exit 1;
    }
  } else {
    print $result->json, "\n";
  }
}


